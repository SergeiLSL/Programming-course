"""
Git. Большой практический выпуск

https://www.youtube.com/watch?v=SEvR78OhGtw
"""
"""
1. 8:32 Скачиваем и устаналиваем Git
2. Открываем Git Bush и устанвлмваем глобальные настройки пользователя
git config --global user.name "Sergei Student" 
git config --global user.email lsl1959@mail.ru 
3. В проводнике создаем папку, называем ее. 
Заходим в нее и правой кнопкой открываем в ней Cit Bash.
4. Посмотрим какие файлы есть в папке (включая скрытые):
ls -la

total 0
drwxr-xr-x 1 lsl33 197609 0 июл 16 15:38 ./
drwxr-xr-x 1 lsl33 197609 0 июл 16 15:39 ../

5. Для того чтобы создать сам репозиторий надо выполнить:
git init

Initialized empty Git repository in D:/work on GitHube/.git/

6. Посмотрим какие файлы есть в папке (включая скрытые):
ls -la

total 16
drwxr-xr-x 1 lsl33 197609 0 июл 16 15:48 ./
drwxr-xr-x 1 lsl33 197609 0 июл 16 15:39 ../
drwxr-xr-x 1 lsl33 197609 0 июл 16 15:48 .git/

Внутри каталога появилась  папка git, 
где и хранится история нашего проекта.

Если вы работаете над каким-нибудь проектом и захотите подключить 
систему контроля версий, также заходите в папку и выполняете git init.

7. 12:56 Создаим пустой документ в нашей папке
- первый путь: прям в папке создаем файл и назовем (к примеру) app.py
- второй путь: пишем команду в Cit Bash - touch app.py

8. Для того чтобы посмотреть историю измений есть простая команда 
git log
fatal: your current branch 'master' does not have any commits yet

которя сообщает, что пока в истории у нас ничего нет.

9. Есть еще полезная команда, которая показывает текущее 
состояние всех файлов
git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        app.py

nothing added to commit but untracked files present (use "git add" to track)

Перевод последней фразы:
ничего не добавлено для фиксации, но присутствуют неотслеживаемые файлы 
(для отслеживания используйте "git add")

10. Файлы бывают двух типов: tracked (отслеживается) 
и untracked (не отслеживается)

1 состояние файла - modified (изменный): файл был изменен, но не 
 попал еще в коммит
2 состояние файла - после коммита, когда Git уже сохранил состояние
 проекта файл переходит в состояние committed (зафиксированный).

Если этот файл изменить, то он снова перейдет в состояние modified 
(изменный), затем в состояние committed (зафиксированный) - круг повторится.

11. Есть еще одно промежуточное состояние файла staged (подготовленный к коммиту).
А область в которой находятся такие подготовленные коммиты 
называется staged area или index (область подготвленных файлов или просто индекс). 15:49

Нельзя выполнить сразу коммит надо выполнить команду git add File1 и 
указать файл или целую директорию,тогда все файлы попадут в stage 
и только потом можно выполнить команду git commit -m "Some changes" и передать 
небольшое описание того, что произошло в рамках этого коммита.
Это сообщение будет отображаться в истории и будет проще понимать,
что произошло при изменении файла.

12. Вернёмся к Git Brush и видим, что наш файл app.py как раз и относится
к untracked (не отслеживается). Изменим это, выполним команду git add app.py
Снова выполняем git status и видим, что у нас появилась новая строка:
изменения для коммитов и наш файл, но уже подкрашенный зеленым цветом.

13. Теперь закомитим наш файл git commit -m "Init commit" 
и напишим какое-*нибудь сообщение

$ git commit -m "Init commit"
[master (root-commit) 486f2b0] Init commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 app.py
Как видим наш файл благополучно закоммитился.
"""

