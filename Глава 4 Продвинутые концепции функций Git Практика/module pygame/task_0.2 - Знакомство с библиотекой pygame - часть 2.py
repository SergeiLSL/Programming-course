"""
Библиотека Pygame / Часть 2. Работа со спрайтами

https://pythonru.com/uroki/biblioteka-pygame-chast-2-rabota-so-sprajtami

"""
"""
Вторая часть серии руководств «Разработка игр с помощью Pygame». 
Она предназначена для программистов начального и среднего уровней, 
которые заинтересованы в создании игр и улучшении собственных навыков 
кодирования на Python. Начать стоит с урока: 
«Библиотека Pygame / Часть 1. Введение».
"""

"""
Что такое спрайт?
Спрайт — это элемент компьютерной графики, представляющий объект 
на экране, который может двигаться. В двухмерной игре все, что вы 
видите на экране, является спрайтами. Спрайты можно анимировать, 
заставлять их взаимодействовать между собой или передавать управление 
ими игроку.

Для загрузки и отрисовки спрайтов в случай этой игры их нужно добавить 
в разделы “Обновление” и “Визуализация” игрового цикла. Несложно 
представить, что если в игре много спрайтов, то цикл довольно быстро 
станет большим и запутанным. В Pygame для этого есть решение: 
группировка спрайтов.

Набор спрайтов — это коллекция спрайтов, которые могут отображаться 
одновременно. Вот как нужно создавать группу спрайтов в игре:
"""
# Pygame шаблон - скелет для нового проекта Pygame
# clock = pygame.time.Clock()
# all_sprites = pygame.sprite.Group()
"""
Теперь этой возможностью можно воспользоваться, добавив группу 
целиком в цикл:
"""
# # Обновление
# all_sprites.update()
#
# # Отрисовка
# screen.fill(BLACK)
# all_sprites.draw(screen)
"""
Теперь при создании каждого спрайта, главное убедиться, что он 
добавлен в группу all_sprites. Такой спрайт будет автоматически 
отрисован на экране и обновляться в цикле.
"""

"""
Игровой цикл — это цикл while, контролируемый переменной running. 
Если нужно завершить игру, необходимо всего лишь поменять значение 
running на False. В результате цикл завершится. 
Теперь можно заполнить каждый раздел базовым кодом.
"""

"""
Создание спрайта
Можно переходить к созданию первого спрайта. В Pygame все спрайты 
выступают объектами. Если вы не работали с этим типом данных в Python, 
то для начала достаточно знать, что это удобный способ группировки 
данных и кода в единую сущность. Поначалу это может путать, но 
спрайты Pygame — отличная возможность попрактиковаться в работе с 
объектами и понять, как они работают.

Начнем с определения нового спрайта:
"""
# class Player(pygame.sprite.Sprite):

"""
class сообщает Python, что определяется новый объект, который будет
спрайтом игрока. Его тип pygame.sprite.Sprite. Это значит, что он
будет основан на заранее определенном в Pygame классе Sprite.

Первое, что нужно в определении class — специальная функция __init__(),
включающая код, который будет запущен при создании нового объекта
этого типа. Также у каждого спрайта в Pygame должно быть два свойства:
image и rect.
"""

# class Player(pygame.sprite.Sprite):
#     def __init__(self):
#         pygame.sprite.Sprite.__init__(self)
#         self.image = pygame.Surface((50, 50))
#         self.image.fill(GREEN)
#         self.rect = self.image.get_rect()

"""
Первая строка, Pygame.sprite.Sprite.__init__(self) требуется в Pygame — 
она запускает инициализатор встроенных классов Sprite. Далее необходимо 
определить свойство image. Сейчас просто создадим квадрат размером 50х50 
и заполним его зеленым (GREEN) цветом. Чуть позже вы узнаете, как сделать 
image спрайта красивее, используя, например, персонажа или космический 
корабль, но сейчас достаточно сплошного квадрата.

Дальше необходимо определить rect спрайта. Это сокращенное от rectangle 
(прямоугольник). Прямоугольники повсеместно используются в Pygame для 
отслеживания координат объектов. Команда get_rect() оценивает изображение 
image и высчитывает прямоугольник, способный окружить его.

rect можно использовать для размещения спрайта в любом месте. 
Начнем с создания спрайта по центру:
"""


# class Player(pygame.sprite.Sprite):
#     def __init__(self):
#         pygame.sprite.Sprite.__init__(self)
#         self.image = pygame.Surface((50, 50))
#         self.image.fill(GREEN)
#         self.rect = self.image.get_rect()
#         self.rect.center = (WIDTH / 2, HEIGHT / 2)

"""
Теперь, после определения спрайта игрока Player, нужно отрисовать 
(создать) его, инициализировав экземпляр (instance) класса Player. 
Также нужно обязательно добавить спрайт в группу all_sprites.
"""
# all_sprites = pygame.sprite.Group()
# player = Player()
# all_sprites.add(player)
"""
Сейчас, если запустить программу, по центру окна будет находиться 
зеленый квадрат. Увеличьте значения WIDTH и HEIGHT в настройках 
программы, чтобы создать достаточно пространства для движения 
спрайта в следующем шаге.
"""
# for event in pygame.event.get():
#     # проверить закрытие окна
#     if event.type == pygame.QUIT:
#         running = False

"""
Движение спрайта
В игровом цикле есть функция all_sprites.update(). 
Это значит, что для каждого спрайта в группе Pygame ищет 
функцию update() и запускает ее. Чтобы спрайт двигался, 
нужно определить его правила обновления:
"""

# class Player(pygame.sprite.Sprite):
#     def __init__(self):
#         pygame.sprite.Sprite.__init__(self)
#         self.image = pygame.Surface((50, 50))
#         self.image.fill(GREEN)
#         self.rect = self.image.get_rect()
#         self.rect.center = (WIDTH / 2, HEIGHT / 2)
#
#     def update(self):
#         self.rect.x += 5

"""
Это значит, что при каждом игровом цикле x-координата спрайта 
будет увеличиваться на 5 пикселей. Запустите программу, 
чтобы посмотреть, как он скрывается за пределами экрана, 
достигая правой стороны.

Исправить это можно, заставив спрайт двигаться по кругу — 
когда он добирается до правой стороны экрана, просто переносить 
его влево. Это легко сделать, используя элемент управления rect 
спрайта:
Так, если левая сторона rect пропадает с экрана, просто задаем 
значение правого края равное 0:
"""

# class Player(pygame.sprite.Sprite):
#     def __init__(self):
#         pygame.sprite.Sprite.__init__(self)
#         self.image = pygame.Surface((50, 50))
#         self.image.fill(GREEN)
#         self.rect = self.image.get_rect()
#         self.rect.center = (WIDTH / 2, HEIGHT / 2)
#
#     def update(self):
#         self.rect.x += 5
#         if self.rect.left > WIDTH:
#             self.rect.right = 0

"""
На этом все. Отправляйтесь изучать и экспериментировать, 
но не забывайте, что все, что вы помещаете в метод update(), 
будет происходить в каждом кадре. Попробуйте научить спрайт 
двигаться сверху вниз (изменив координату y) или заставить его 
отталкиваться от стен (изменяя направлении по достижении края).
"""

"""
Код урока:
"""
# Pygame шаблон - скелет для нового проекта Pygame
import pygame
import random

WIDTH = 800
HEIGHT = 650
FPS = 30

# Задаем цвета
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)


class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((50, 50))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH / 2, HEIGHT / 2)

    def update(self):
        self.rect.x += 5
        if self.rect.left > WIDTH:
            self.rect.right = 0


# Создаем игру и окно
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("My Game")
clock = pygame.time.Clock()
all_sprites = pygame.sprite.Group()
player = Player()
all_sprites.add(player)

# Цикл игры
running = True
while running:
    # Держим цикл на правильной скорости
    clock.tick(FPS)
    # Ввод процесса (события)
    for event in pygame.event.get():
        # check for closing window
        if event.type == pygame.QUIT:
            running = False

    # Обновление
    all_sprites.update()

    # Рендеринг
    screen.fill(BLACK)
    all_sprites.draw(screen)
    # После отрисовки всего, переворачиваем экран
    pygame.display.flip()

pygame.quit()

"""
В следующем уроке речь пойдет о том, как использовать 
арт в спрайтах — перейти от обычного квадрата к анимированному 
персонажу.

Часть 3. Больше о спрайтах
"""
